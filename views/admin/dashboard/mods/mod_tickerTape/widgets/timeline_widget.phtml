<?php
	/**
	 * @name: Timeline Widget
	 * @description: A widget to enable creating a new ticker tape
	 * @params: No additional params required
	 */
?>
<?php
	// Generate random and unique widget id
	$widget_id = uniqid();

	// Get module instance
	$mod_tickerTape = $TC->modules['mod_tickerTape'];
	// Get module data
	$mod_data = $mod_tickerTape->store;

	// Get module fragrance choice instance
	$mod_fchoice = $TC->modules['mod_fragranceChoice'];
	$assigned_fragrances = $mod_fchoice->getAssignedFragrances();

	// Load unit data
	$TC->loadData('unit', 0);
	$units = $TC->data['unit'][0];

	// Init row counting
	$nTimelineBodyRows = 0;
	$rowUnitIDMapping = [];

	// Pass a mapping of the units available with their registered fragrances
	// Syntax: $unitFragranceMapping[UNIT_ID] => [FRAGRANCE DATASETS]
	$unitFragranceMapping = [];

	foreach($assigned_fragrances as $fr)
	{

		// Skip unreachable units
		if(!($this->callModelFunc("unit", "isLoaded", $fr['fragrance_unit'], $TC))) continue;

		// Get the corresponding general fragrance
		$general_fr = $mod_fchoice->getGeneralFragranceByAssignedID($fr['fragrance_id']);

		// Create the unit_id => fragrance_dataset mapping
		if(!isSizedArray($unitFragranceMapping[$fr['fragrance_unit']]))
			$unitFragranceMapping[$fr['fragrance_unit']] = [$general_fr];
		else
		{

			if(!in_array($general_fr, $unitFragranceMapping[$fr['fragrance_unit']]))
				array_push($unitFragranceMapping[$fr['fragrance_unit']], $general_fr);

		}

	}
?>

<style>
	#widget__timeline .timeline-inner { width: 100%; height: auto; min-height: 300px; }
	#widget__timeline .inner-container { width: 100%; position: relative; height: 100%; }

	#widget__timeline #timeline_create,
	#widget__timeline #timeline_edit { position: absolute; top: 0; bottom: 0; left: 0; right: 0; height: 100%; transition: 0.25s all ease-in-out; }
	#widget__timeline #timeline_create { cursor: pointer; z-index: 200; background: #fff; }
	#widget__timeline #timeline_create .title-box h1 { font-size: 30px; }
	#widget__timeline #timeline_create .title-box .create-icon { text-align: center; padding-top: 20px; font-size: 30px; }

	#widget__timeline #timeline_edit #timeline-controls { width: 250px; z-index: 200; transition: 0.25s all ease-in-out; background: #fff; position: absolute; top: 0; left: 0; bottom: 0; box-shadow: 0 0 10px rgba(0,0,0,0.30); }
	#widget__timeline #timeline_edit #timeline-controls.minimized { width: 100px; }
	#widget__timeline #timeline_edit #timeline-controls .vertical_hint__timeline_controls { transform: rotate(270deg); transform-origin: top left; font-family: "Montserrat", sans-serif; position: absolute; z-index: 999; font-weight: 700; left: 32%; top: 65%; font-size: 20px; }
	#widget__timeline #timeline_edit #timeline-controls .timeline-controls-main { margin-left: unset; margin-right: unset; }
	#widget__timeline #timeline_edit #timeline-controls .timeline-controls-expandable { position: absolute; top: calc(50% - 10px); right: -17px; cursor: pointer; }
	#widget__timeline #timeline_edit #timeline-controls .timeline-controls-expandable:before { content: ""; z-index: -1; position: absolute; top: -16px; right: -9px; width: 25px; height: 50px; background: #fff; border-bottom-right-radius: 50px; border-top-right-radius: 50px; box-shadow: 0 0 10px rgba(0,0,0,0.30) }
	#widget__timeline #timeline_edit #timeline-controls .form-control { border: 0; }
	#widget__timeline #timeline_edit #timeline-controls input.form-control { border-bottom: 1px solid rgba(0,0,0,0.30); border-radius: 1px; transition: 0.15s all ease-in-out; }
	#widget__timeline #timeline_edit #timeline-controls input.form-control:focus { box-shadow: none; border-bottom: 1px solid var(--primary-blue-alt); }
	#widget__timeline #timeline_edit #timeline-controls input.form-control ~ span { position: absolute; right: 45px; top: 12px; }
	#widget__timeline #timeline_edit #timeline-controls .form-control-btn-col { background: transparent; }
	#widget__timeline #timeline_edit #timeline-controls .form-control-btn-col button { margin: 0 auto;}

	#widget__timeline #timeline_edit #timeline .timeline-inner { /*overflow-x: scroll; overflow-y: hidden;*/ overflow: hidden; }
	#widget__timeline #timeline_edit #timeline .timeline-inner .timeline-body-scrollbar { width: 100%; height: 12px; background: #fafafa; border-top: 1px solid lightgray; position: absolute; bottom: 0; left: 100px; right: 0; z-index: 9999; border-radius: 5px; }
	#widget__timeline #timeline_edit #timeline .timeline-inner .timeline-body-scrollbar .tracker { margin: 4px; width: 30px; height: 4px; background: #c1c1c1; border-radius: 10px; }
	#widget__timeline #timeline_edit #timeline .timeline-header,
	#widget__timeline #timeline_edit #timeline .timeline-body { height: 70px; width: 100%; margin-left: 100px; }
	#widget__timeline #timeline_edit #timeline .timeline-col { width: 75px; display: inline-block; padding: 10px; border-right: 1px solid #ededf5; border-bottom: 1px solid #ededf5; transition: 0.1s all ease-in-out; }
	#widget__timeline #timeline_edit #timeline .timeline-body .timeline-col:hover { cursor: pointer; }
	#widget__timeline #timeline_edit #timeline .timeline-body .timeline-col .timeline-col-inner { transition: 0.1s all ease-in; }
	#widget__timeline #timeline_edit #timeline .timeline-body .timeline-col.highlighted .timeline-col-inner { background: #e8e8f0; width: calc(100% - 20px); height: calc(100% - 20px); top: 10px; left: 10px; position: absolute; border-radius: 5px; }
	#widget__timeline #timeline_edit #timeline .timeline-col span { display: block; text-align: center; }
	#widget__timeline #timeline_edit #timeline .timeline-col span:last-child { margin-top: -5px; }

	#widget__timeline #timeline_edit #timeline .timeline-body .tickerBadge { position: absolute; border-radius: 10px; color: #fefefe; font-size: 16px; font-family: "Raleway", BlinkMacSystemFont, sans-serif; cursor: pointer; line-height: 150%; user-select: none; }
	#widget__timeline #timeline_edit #timeline .timeline-body .tickerBadge span.text-muted { color: #e1e2e7 !important; }

	.addTickerEventModal input,
	.addTickerEventModal select { width: 50% !important; float: right !important; }
	.addTickerEventModal input ~ .clearfix { padding-bottom: 5px; }
</style>

<!-- Widget -->
<div id="widget__timeline" class="widget-<?php echo $widget_id; ?>">
	<div class="card" style="margin:0;overflow:hidden;">
		<div class="timeline-inner">
			<div id="timeline_create" class="inner-container flex-centered">
				<div class="title-box">
					<?php global $tickerTape_create; ?>
					<h1><?php echo $tickerTape_create[$GLOBALS['lang']]; ?></h1>
					<div class="create-icon">
						<i class="fas fa-plus-circle"></i>
					</div>
				</div>
			</div>
			<div id="timeline_edit" class="inner-container">

				<?php renderForm_init("?page=Admin&mod=mod_tickerTape&action=AddTickerTape", ["activate_card_wrap" => false]); ?>

				<div id="timeline-controls" class="flex-centered">
					<div class="timeline-controls-minimized dnone">
						<div class="vertical_hint__timeline_controls">
							<?php global $actions; ?>
							<?php echo $actions[$GLOBALS['lang']]; ?>
						</div>
					</div>
					<div class="timeline-controls-main row">
						<div class="formDiv form-control col-md-12 no-label">
							<?php global $title; ?>
							<?php renderForm_input("title", null, null, array(
									"type" => "text",
							"container" => false,
							"required" => true,
							"class" => isset_true($TC->view['title_err']['err_status']) ? "input-error" : "",
							"placeholder" => isset_true($TC->view['title_err']['err_status']) ? $TC->view['titlename_err']['err_msg'] : $title[$GLOBALS['lang']]));
							?>
						</div>
						<div class="formDiv form-control col-md-12 no-label">
							<?php global $totalTimeInMinutes, $minutes; ?>
							<?php renderForm_input("totaltime", null, null, array(
								"type" => "number",
								"container" => false,
								"required" => true,
								"class" => isset_true($TC->view['totaltime_err']['err_status']) ? "input-error" : "",
								"placeholder" => isset_true($TC->view['totaltime_err']['err_status']) ? $TC->view['totaltime_err']['err_msg'] : $totalTimeInMinutes[$GLOBALS['lang']]));
							?>
							<span class="text-muted totaltime-hint dnone no-transition"><?php echo $minutes[$GLOBALS['lang']]; ?></span>
						</div>
						<input type="hidden" name="timelineDataStoreJSON">
						<div class="formDiv form-control form-control-btn-col col-md-12 no-label" style="margin-top: 20px;">
							<?php global $form_save; ?>
							<button type="submit" class="btn-gradient btn-gradient-lbluegreen"><?php echo $form_save[$GLOBALS['lang']]; ?></button>
						</div>
						<div class="formDiv form-control form-control-btn-col col-md-12 no-label">
							<?php global $delete; ?>
							<button type="button" id="tickerTapeCancel" class="btn-gradient btn-gradient-red"><?php echo $delete[$GLOBALS['lang']]; ?></button>
						</div>
					</div>
					<div class="timeline-controls-expandable">
						<div class="timeline-open"><i class="fas fa-chevron-left"></i></div>
						<div class="timeline-close dnone"><i class="fas fa-chevron-right"></i></div>
					</div>
				</div>
				<div id="timeline" class="inner-container">
					<div class="timeline-id"></div>
					<div class="timeline-inner inner-container">
						<div class="timeline-body-scrollbar">
							<div class="tracker"></div>
						</div>
						<div class="timeline-header">
							<div class="timeline-col inner-container flex-centered">
								<span class="nbmr-indicator">1</span>
								<span class="timeunit-indicator text-muted">Min</span>
							</div>
						</div>
						<div class="timeline-body">
							<div class="timeline-body-container inner-container">
								<?php foreach($units as $unit) { ?>
									<?php if((bool)$unit['unit_isHub']) continue; ?>
									<?php $nTimelineBodyRows++; ?>
									<?php $rowUnitIDMapping[$nTimelineBodyRows] = $unit['unit_id']; ?>
									<div class="timeline-row inner-container">
										<div class="timeline-col inner-container" onmouseenter="onTimelineColumnHighlight(this)" onmouseleave="onTimelineColumnHighlight(this)">
											<div
													class="timeline-col-inner"
													data-toggle="modal"
													data-target="#addTickerEventModal-<?php echo $widget_id; ?>"
													onclick="$($(this).data('target')).appendTo('body'); $(this).addClass('active-timeline-col');"
											></div>
										</div>
									</div>
								<?php } ?>
							</div>
						</div>
					</div>
				</div>

				<?php renderForm_close("", array("activate_submit_btn" => false)); ?>

			</div>
		</div>
	</div>

	<!-- Modal -->
	<?php global $tutorial_time_addEvent_headline, $form_save, $close; ?>
	<div class="modal fade inner-container addTickerEventModal" id="addTickerEventModal-<?php echo $widget_id; ?>" tabindex="-1" role="dialog" aria-labelledby="addTickerEventModal" aria-hidden="true">
		<div class="modal-dialog modal-borderless" role="document">
			<div class="modal-content">

				<?php renderForm_init("?page=Admin&mod=mod_tickerTape&action=AddTickerTapeEvent", ["activate_card_wrap" => false]); ?>

				<?php renderForm_input("ref_tickertape_id", "", -1, array(
					"type" => "hidden",
					"container" => false,
					"inline" => false,
					"required" => true));
				?>
				<?php renderForm_input("ref_tickerbadge_id", "", null, array(
					"type" => "hidden",
					"container" => false,
					"inline" => false,
					"required" => true));
				?>

				<div class="modal-header">
					<h5 class="modal-title" id="exampleModalLongTitle"><?php echo $tutorial_time_addEvent_headline[$GLOBALS['lang']]; ?></h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body table_widget">
					<?php renderForm_input("tevent_title", $title[$GLOBALS['lang']], null, array(
							"type" => "text",
					"container" => false,
					"required" => true,
					"class" => isset_true($TC->view['tevent_title_err']['err_status']) ? "input-error" : "",
					"placeholder" => isset_true($TC->view['tevent_title_err']['err_status']) ? $TC->view['tevent_titlename_err']['err_msg'] : ""));
					?>
					<?php renderForm_input("active-timeline-col", "Startminute", -1, array(
							"type" => "number",
					"container" => false,
					"inline" => false,
					"readonly" => true,
					"required" => true));
					?>
					<?php renderForm_input("tevent_end_timeline_col_nmbr", "Endminute", null, array(
							"type" => "number",
					"container" => false,
					"required" => true,
					"class" => isset_true($TC->view['tevent_end_timeline_col_nmbr_err']['err_status']) ? "input-error" : "",
					"placeholder" => ""));
					?>
					<?php renderForm_input("tevent_unit_id", "Einheit ID", 0, array(
							"type" => "number",
					"container" => false,
					"inline" => false,
					"readonly" => true,
					"required" => true));
					?>
					<?php renderForm_select(
							"tevent_fragrance_id",
							"Duft",
							array("" => ""),
					0,
					array("container" => false));
					?>
				</div>
				<div class="modal-footer">
					<button class="btn-gradient btn-gradient-lbluegreen" type="submit"><?php echo $form_save[$GLOBALS['lang']]; ?></button>
					<button type="button" class="btn btn-gradient btn-gradient-lbluepurple btn-delete" data-dismiss="modal" style="display: none;"><?php echo $delete[$GLOBALS['lang']]; ?></button>
					<button type="button" class="btn btn-gradient btn-gradient-red" data-dismiss="modal"><?php echo $close[$GLOBALS['lang']]; ?></button>
				</div>

				<?php renderForm_close("", array("activate_submit_btn" => false)); ?>

			</div>
		</div>
	</div>
</div>

<script>
	// Init the data store
	let timelineDataStore = {
		nMinutes: null,
		rows: {}
	};
	const initialTimlineDataStore = Object.assign({}, timelineDataStore);

	// Declare fundamental variables
	const timelineSec = document.querySelector("#timeline");
	const timelineID = timelineSec.querySelector(".timeline-id");
	const timelineInner = timelineSec.querySelector(".timeline-inner");
	const timelineCreateSec = document.querySelector("#timeline_create");
	const timelineEditSec = document.querySelector("#timeline_edit");

	const initialTimelineMarkup = timelineSec.outerHTML;
	const nTimelineBodyRows = parseInt("<?php echo $nTimelineBodyRows; ?>");
	const rowUnitIDMapping = JSON.parse('<?php echo json_encode(($rowUnitIDMapping)); ?>');
	const unitFragranceMapping = JSON.parse('<?php echo json_encode($unitFragranceMapping); ?>');

	// Create new ticker tape
	timelineCreateSec.onclick = e => {
		e.preventDefault();

		timelineCreateSec.style.left = `-${parseInt(timelineCreateSec.offsetWidth)}px`;
		timelineID.setAttribute("id", Math.random().toString(36).substring(2, 15));
	};

	/* Timeline controls */

	// Totaltime indicator
	const onTotalTimeIndicatorChange = e => {
		buildTimeline(parseInt(e.target.value));
		e.target.nextElementSibling.nextElementSibling.style.display = (e.target.value.toString().trim().length > 0 ? "block" : "none");
	};

	timelineEditSec.querySelector("input[name='totaltime']").onkeyup = e => onTotalTimeIndicatorChange(e);
	timelineEditSec.querySelector("input[name='totaltime']").onchange = e => onTotalTimeIndicatorChange(e);

	// Cancel current ticker tape and discard all changes
	timelineEditSec.querySelector("button#tickerTapeCancel").onclick = () => {
		timelineDataStore = initialTimlineDataStore;
		applyTimelineVisuals();

		document.querySelector("#timeline").outerHTML = initialTimelineMarkup;
		timelineEditSec.querySelector("input[name='totaltime']").value = "";

		onTotalTimeIndicatorChange({
			target: timelineEditSec.querySelector("input[name='totaltime']")
		});

		timelineCreateSec.style.left = "0px";
		buildTimeline(30);
	};

	// Expandable onclick
	timelineEditSec.querySelector(".timeline-controls-expandable").onclick = e => {
		let controlContainer = document.querySelector("#widget__timeline #timeline-controls");
		let verticalHint = document.querySelector(".timeline-controls-minimized");
		let mainControls = document.querySelector(".timeline-controls-main");
		let expandableBtn = document.querySelector(".timeline-controls-expandable");

		verticalHint.classList.toggle("dnone");
		mainControls.classList.toggle("dnone");
		controlContainer.classList.toggle("minimized");

		expandableBtn.childNodes.forEach(child => {
			if(!(child instanceof HTMLElement)) return;

			child.classList.toggle("dnone");
		});
	};

	// Timline column hover
	const onTimelineColumnHighlight = targetEl => {
		targetEl.classList.toggle("highlighted");
	};

	/* UI calculation */
	const timelineHeader = timelineEditSec.querySelector(".timeline-header");
	const timelineBody = timelineEditSec.querySelector(".timeline-body");

	timelineBody.style.height = (parseInt(timelineSec.offsetHeight) - parseInt(timelineHeader.offsetHeight)) + "px";

	/* Custom scrollbar */
	const scrollbarContainer = timelineSec.querySelector(".timeline-body-scrollbar");
	const scrollbarTracker = scrollbarContainer.querySelector(".tracker");

	let widthPercent = 0;

	/**
	 * Manipulates the tacker part of the scrollbar to enable its functionality
	 */
	const adjustScrollbarTracker = () => {

		widthPercent = (parseInt(timelineSec.offsetWidth) / parseInt(timelineBody.style.width));

		scrollbarTracker.style.width = (
			parseInt(scrollbarContainer.offsetWidth) * widthPercent + "px"
		);

		scrollbarContainer.style.width = timelineBody.offsetWidth;

	}; // inline function adjustScrollbarTracker()

	// Calculate width of tracker onresize
	window.addEventListener("resize", adjustScrollbarTracker);

	// Handle the dragging of the scrollbar
	let isDragging = false;
	let offsetX = 0;
	let trackerClientXOffset = 0;
	let trackerClientRectLeft = 0;

	scrollbarTracker.addEventListener("mousedown", e => {
		isDragging = true;
		offsetX = e.clientX;
	});

	window.addEventListener("mouseup", () => {
		isDragging = false;
		trackerClientXOffset = 0;
		trackerClientRectLeft = 0;
	});

	window.addEventListener("mousemove", e => {
		e.preventDefault();

		if(!isDragging) return false;

		let maxScroll = parseInt(timelineBody.style.width);
		let mouseDeltaX = e.clientX - offsetX;
		let deltaX = mouseDeltaX;

		offsetX = e.clientX;
		let scrollLeft = parseInt(timelineInner.scrollLeft) + (deltaX / widthPercent);

		if(scrollLeft < 0) scrollLeft = 0;
		if(scrollLeft > maxScroll) scrollLeft = maxScroll;

		timelineInner.scrollLeft = scrollLeft;

		if(trackerClientRectLeft === 0) {
			trackerClientRectLeft = Math.abs(scrollbarContainer.getBoundingClientRect().left);
			trackerClientXOffset = Math.abs(e.clientX - scrollbarTracker.getBoundingClientRect().left + scrollLeft);
		}

		let marginLeft = (e.clientX - trackerClientRectLeft) + scrollLeft - trackerClientXOffset;

		scrollbarTracker.style.marginLeft = (
			marginLeft + scrollbarTracker.offsetWidth >= scrollbarContainer.offsetWidth
				? scrollbarContainer.offsetWidth - scrollbarTracker.offsetWidth
				: marginLeft
		) + "px";
	});

	/* Timeline generation */

	/**
	 * Generates timeline cells and initiates dependent functions
	 *
	 * @param {Number} nMinutes     The amount of minutes the timline has to support
	 *
	 * @returns {boolean|void}
	 */
	const buildTimeline = nMinutes => {

		if(isNaN(nMinutes)) return false;

		const headSec = timelineHeader;
		const headCol = headSec.querySelector(".timeline-col");

		const bodySec = timelineBody;
		const bodyRow = bodySec.querySelector(".timeline-row");
		const bodyCol = bodyRow.querySelector(".timeline-col");

		timelineDataStore.nMinutes = nMinutes;

		headSec.style.width = bodySec.style.width = headCol.offsetWidth * nMinutes + "px";

		headSec.innerHTML = "";
		bodySec.firstElementChild.innerHTML = "";
		bodyRow.innerHTML = "";

		bodyRow.classList.remove(...(bodyRow.classList));
		bodyRow.classList.add("timeline-row");
		bodyRow.classList.add("inner-container");

		// Add a column to the timeline head for each minute requested
		for(let i = 1; i <= nMinutes; i++) {
			let lastTimeUnit = headCol.querySelector("span.timeunit-indicator").innerHTML;

			headCol.querySelector("span.nbmr-indicator").innerHTML = (i > 60 ? (i / 60).toFixed(2) : i).toString();
			headCol.querySelector("span.timeunit-indicator").innerHTML = lastTimeUnit === "Min" && i > 60 || lastTimeUnit === "H" ? "H" : "Min";

			headSec.innerHTML += headCol.outerHTML;
		}

		// Add a row for each valid unit registered
		for(let i = 0; i < nTimelineBodyRows; i++) {
			bodySec.firstElementChild.innerHTML += bodyRow.outerHTML;

			timelineDataStore.rows[i] = [];
		}

		// Add a column to each row for each minute
		bodySec.querySelectorAll(".timeline-row").forEach((rowNode, rowNmbr) => {
			rowNode.classList.add(`row-${rowNmbr}`);
			rowNode.style.height = (parseInt(timelineBody.offsetHeight) / nTimelineBodyRows) + "px";

			for(let i = 1; i <= nMinutes; i++) {
				let newCol = document.createElement("div");
				newCol.innerHTML = bodyCol.outerHTML;
				newCol.firstElementChild.classList.add(`col-${i}`);

				rowNode.innerHTML += newCol.innerHTML;
			}
		});

		// Recalculate the scrollbar
		adjustScrollbarTracker();

	}; // inline function buildTimeline()

	// Generate sample set onload
	buildTimeline(30);

	/* Build addTickerEventModal */
	const modalEl = document.querySelector('#addTickerEventModal-<?php echo $widget_id; ?>');
	let modalIsVisible = false;
	let activeTimelineColNmbr = -1;

	/**
	 * Prepares modal dependant actions
	 *
	 * @returns {boolean}
	 */
	const buildAddTickerEventModal = (timelineDataObj = null) => {

		const isMutationRecordCall = (
			Array.isArray(timelineDataObj) &&
			timelineDataObj[0] instanceof MutationRecord
		);

		let isEditCall = false;

		// Cancel redundant call
		if(
			(
				modalEl.style.display === "block" && modalIsVisible
				||
				modalEl.style.display !== "block" && !modalIsVisible
			)
			&&
			isMutationRecordCall
		) return false;

		// If the function was called without the MutationObserver involved, keep track of it
		if(!isMutationRecordCall && !modalIsVisible) {
			$(modalEl).modal('show');
		}

		let triggerColEl,
			activeRowNmbr,
			activeUnitID;

		// Cast input cleaners on the modal
		document.querySelector(".modal-backdrop").onclick = removeModalValues;
		modalEl.querySelectorAll("button[data-dismiss='modal']").forEach(el => {
			if(!el.classList.contains("btn-delete")) el.onclick = removeModalValues;
		});

		// Extract the row number
		if(timelineDataObj == null || isMutationRecordCall) {
			triggerColEl = timelineEditSec.querySelector(".active-timeline-col");
			activeRowNmbr = parseInt(
				Array.from(
					triggerColEl
						.closest(".timeline-row")
						.classList
				)
					.slice(-1)[0]
					.replace("row-", "")
			);
			activeUnitID = Object.values(rowUnitIDMapping)[activeRowNmbr];
		} else {
			triggerColEl = timelineEditSec.querySelector(`.col-${timelineDataObj.startCol}`);
			activeRowNmbr = timelineDataObj.row;
			activeUnitID = timelineDataObj.unitID;

			isEditCall = true;
		}

		/**
		 * Returns the next occupied column
		 *
		 * @param {Number}  startCol
		 */
		const getNextOccupiedColFromCol = (row, startCol) => {

			let col = timelineDataStore.nMinutes;

			if(startCol === -1) {
				return col;
			}

			timelineDataStore.rows[row].forEach(dataObj => {
				if(((col - dataObj.startCol) < col) && startCol !== (parseInt(dataObj.endCol) + 2)) {
					col = dataObj.startCol - 1;
				}
			});

			return col;

		}; // inline function getNextOccupiedColFromCol()

		// Update current state
		modalIsVisible = (modalEl.style.display === "block");

		// Update the hidden identifiers
		modalEl.querySelector("input[name='ref_tickertape_id']").value = timelineID.id;
		modalEl.querySelector("input[name='active-timeline-col']").value = activeTimelineColNmbr = modalIsVisible
			? parseInt(document.querySelector(".active-timeline-col").parentElement.classList[2].split("-")[1])
			: (timelineDataObj != null ? timelineDataObj.startCol : -1);

		if(isEditCall) modalEl.querySelector("input[name='ref_tickerbadge_id']").value = timelineDataObj.id;

		// Manipulate the modal form
		const titleEl = document.querySelector("input[name='tevent_title']");
		const endTimeEl = document.querySelector("input[name='tevent_end_timeline_col_nmbr']");

		const title = isEditCall ? timelineDataObj.title : "";
		const endCol = isEditCall ? timelineDataObj.endCol : "";
		const minCol = isEditCall ? timelineDataObj.startCol : (activeTimelineColNmbr === -1 ? 0 : activeTimelineColNmbr);
		let maxCol = isEditCall ? timelineDataObj.endCol : getNextOccupiedColFromCol(activeRowNmbr, activeTimelineColNmbr) || timelineDataStore.nMinutes;
		maxCol = maxCol < minCol ? timelineDataStore.nMinutes : maxCol;

		titleEl.value = titleEl.value !== "" ? titleEl.value : title;
		endTimeEl.value = endTimeEl.value !== "" ? endTimeEl.value : endCol;
		endTimeEl.setAttribute("min", !isNaN(parseInt(endTimeEl.getAttribute("min"))) ? endTimeEl.getAttribute("min") : minCol);
		endTimeEl.setAttribute("max", !isNaN(parseInt(endTimeEl.getAttribute("max"))) ? endTimeEl.getAttribute("max") : maxCol);
		modalEl.querySelector("input[name='tevent_unit_id']").value = activeUnitID;

		// Grant delete functionality if this is an edit call
		if(isEditCall) {
			modalEl.querySelector(".btn-delete").style.display = "block";
			modalEl.querySelector(".btn-delete").onclick = (() => {
				let objIndex = -1;

				timelineDataStore.rows[timelineDataObj.row].forEach((item, i) => {
					if(item.id === timelineDataObj.id) objIndex = i;
				});

				if(objIndex !== -1) {
					timelineDataStore.rows[timelineDataObj.row].splice(objIndex, 1);
					applyTimelineVisuals();
					removeModalValues();
				}
			}).bind(timelineDataObj)
		} else {
			if(!modalIsVisible) modalEl.querySelector(".btn-delete").style.display = "none";
		}

		// Build the select input concerning the assigned fragrance id for the tevent
		const frSelectEl = modalEl.querySelector("select[name='tevent_fragrance_id']");
		frSelectEl.innerHTML = "";

		unitFragranceMapping[activeUnitID].forEach(frObj => {
			frSelectEl.innerHTML += `<option value="${frObj.fragrance_id}">${frObj.fragrance_name}</option>`;
		});

		// If the modal has been faded out, revoke the active-timeline-col class
		if(!modalIsVisible && activeTimelineColNmbr === -1) {
			triggerColEl.classList.remove("active-timeline-col");
			modalEl.querySelector("input[name='ref_tickerbadge_id']").value = "";
		}

		// Cast events
		modalEl.querySelector("form").onsubmit = onModalFormSubmit;

	}; // inline function buildAddTickerEventModal()

	/**
	 * Handler for the form submit
	 *
	 * @param {MouseEvent|TouchEvent} e     The triggerevent
	 */
	const onModalFormSubmit = e => {

		// Prevent an actual form submit
		e.preventDefault();

		// Hide the modal
		$(modalEl).modal('hide');

		// Extract the information from the hidden identifiers
		const tickerTapeID = modalEl.querySelector("input[name='ref_tickertape_id']").value;
		const tickerBadgeID = parseInt(modalEl.querySelector("input[name='ref_tickerbadge_id']").value);
		const timelineTargetColNmbr = modalEl.querySelector("input[name='active-timeline-col']").value;

		const triggerColEl = timelineEditSec.querySelector(".active-timeline-col");
		const activeRowNmbr = parseInt(
			Array.from(
				triggerColEl
					.closest(".timeline-row")
					.classList
			)
				.slice(-1)[0]
				.replace("row-", "")
		);

		// Struct the data object
		const frSelectEl = modalEl.querySelector("select[name='tevent_fragrance_id']");
		const bgColors = ["#1684ff", "#4ac495", "#e3484c"];
		const color = bgColors[Math.round(Math.random() * bgColors.length - 1)];

		const dataObj = {
			id: !isNaN(tickerBadgeID) ? tickerBadgeID : parseInt(Math.random() * parseInt(new Date().valueOf())),
			tickerTapeRefID: tickerTapeID,
			title: modalEl.querySelector("input[name='tevent_title']").value,
			row: activeRowNmbr,
			startCol: timelineTargetColNmbr,
			endCol: modalEl.querySelector("input[name='tevent_end_timeline_col_nmbr']").value,
			unitID: rowUnitIDMapping.hasOwnProperty(activeRowNmbr + 1) ? rowUnitIDMapping[activeRowNmbr + 1] : null,
			fragranceID: frSelectEl.options[frSelectEl.selectedIndex].value,
			bgColor: color || bgColors[bgColors.length - 1]
		};

		// Get the index of the dataObj in the store by id
		const indexInStore = timelineDataStore.rows[activeRowNmbr]
			.map(e => e.id)
			.indexOf(dataObj.id);

		// Write data to timelineDataStore
		if(indexInStore === -1) timelineDataStore.rows[activeRowNmbr].push(dataObj);
		else timelineDataStore.rows[activeRowNmbr][indexInStore] = dataObj;

		// Add the new event to the ticker tape visually
		applyTimelineVisuals();

		// Update the timeline-control hidden data form to ensure that timelineDataStore is submitted on tickerTapeSave
		timelineEditSec.querySelector("input[name='timelineDataStoreJSON']").value = JSON.stringify(timelineDataStore);

		// Remove the modal values
		removeModalValues();

	}; // inline function onModalFormSubmit()

	/**
	 * Removes all input from the tevent-modal
	 */
	const removeModalValues = () => {

		const titleEl = document.querySelector("input[name='tevent_title']");
		const endTimeEl = document.querySelector("input[name='tevent_end_timeline_col_nmbr']");

		titleEl.value = "";
		endTimeEl.value = "";
		endTimeEl.removeAttribute("min");
		endTimeEl.removeAttribute("max");

	}; // inline function removeModalValues()

	// Init the build-modal-function call when the modal is about to be faded in
	const addTickerEventModalObserver = new MutationObserver(buildAddTickerEventModal);
	addTickerEventModalObserver.observe(modalEl, { attributes: true, attributeFilter: ['style'] });

	/**
	 * Updates the visuals of the timeline based on changes of the timelineDataStore
	 */
	const applyTimelineVisuals = () => {

		let iteratedBadgeIDs = [];

		Object.values(timelineDataStore.rows).forEach((rowArr, i) => {
			let currentRowEl = timelineEditSec.querySelector(`.row-${i}`);

			rowArr.forEach(dataObj => {
				if(timelineEditSec.querySelector(`#badge-${dataObj.id.toString()}`)) {
					timelineEditSec.querySelector(`#badge-${dataObj.id.toString()}`).remove();
				}

				const startColEl = currentRowEl.querySelector(`.col-${dataObj.startCol}`);
				const endColEl = currentRowEl.querySelector(`.col-${dataObj.endCol}`);

				const startColBoundingRect = startColEl.getBoundingClientRect();
				const endColBoundingRect = endColEl.getBoundingClientRect();

				// Create the badge and pass critical identifiers
				iteratedBadgeIDs.push(parseInt(dataObj.id));

				const tickerBadgeEl = document.createElement("div");
				tickerBadgeEl.classList.add("tickerBadge");
				tickerBadgeEl.classList.add("flex-centered");
				tickerBadgeEl.id = `badge-${dataObj.id}`;

				// Create the caption and append it to the badge
				const tickerBadgeCaptionEl = document.createElement("div");
				const tickerBadgeCaptionSpan1 = document.createElement("span");
				const tickerBadgeCaptionSpan2 = document.createElement("span");

				const fragrances = unitFragranceMapping[parseInt(dataObj.unitID)];

				tickerBadgeCaptionSpan1.innerHTML = dataObj.title + "<br>";
				tickerBadgeCaptionSpan2.innerHTML = fragrances[fragrances.indexOf(
					(fragrances.find(o => { if(o.fragrance_id === dataObj.fragranceID) return o; }))
				)].fragrance_name;

				tickerBadgeCaptionSpan2.classList.add("text-muted");

				tickerBadgeCaptionEl.appendChild(tickerBadgeCaptionSpan1);
				tickerBadgeCaptionEl.appendChild(tickerBadgeCaptionSpan2);
				tickerBadgeEl.appendChild(tickerBadgeCaptionEl);

				// Style the badge
				tickerBadgeEl.style.background = dataObj.bgColor;
				tickerBadgeEl.style.width = `${endColBoundingRect.left + endColEl.offsetWidth - startColBoundingRect.left - 10}px`;
				tickerBadgeEl.style.height = `${currentRowEl.offsetHeight - 10}px`;
				tickerBadgeEl.style.left = `${startColEl.offsetLeft + 5}px`;
				tickerBadgeEl.style.top = `${i * startColEl.offsetHeight + 5}px`;

				// Insert the badge into ".timeline-body-container"
				timelineBody.firstElementChild.insertAdjacentElement("beforeend", tickerBadgeEl);

				// Cast the onclick event for the opportunity to edit the entry
				tickerBadgeEl.onclick = e => onTickerBadgeEdit(dataObj);
			});
		});

		// Remove badges that are present in the dom but where removed from the timelineDataStore
		timelineBody.querySelectorAll(".tickerBadge").forEach(domBadge => {
			if(iteratedBadgeIDs.indexOf(parseInt(domBadge.id.replace("badge-", ""))) === -1)
				domBadge.remove();
		});

	}; // inline function applyTimelineVisuals()

	/**
	 * Initiates the ticker-badge-edit dialog
	 *
	 * @param {Object} teventDataObj
	 */
	const onTickerBadgeEdit = teventDataObj => {

		return buildAddTickerEventModal(teventDataObj);

	}; // inline function onTickerBadgeEdit()
</script>
